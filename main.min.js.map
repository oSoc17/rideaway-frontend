{"version":3,"sources":["node_modules/browser-pack/_prelude.js","src/scripts.js"],"names":["e","t","n","r","s","o","u","a","require","i","f","Error","code","l","exports","call","length","1","module","startTracking","markerItem","geojson","type","features","id","geometry","coordinates","properties","title","iconSize","el","document","createElement","className","child1","child2","appendChild","src","mapboxgl","Marker","navigator","geolocation","watchPosition","position","onPosition","alert","window","DeviceOrientationEvent","addEventListener","_setHeading","setLngLat","coords","longitude","latitude","addTo","map","addAllLayers","addSource","data","addLayer","source","layout","visibility","paint","line-color","property","line-width","line-opacity","symbol-placement","text-font","text-field","text-size","text-color","toggleLayer","getLayoutProperty","setLayoutProperty","addMarkers","origin","destination","forEach","marker","style","width","height","offset","calculateRoute","profile","url","createGeocoder","placeholder","MapboxGeocoder","accessToken","flyTo","country","Map","container","center","zoom","on","setPoint","result","addControl","GeolocateControl","geocoder","geocoder2","_ref","_ref2","console","log"],"mappings":"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","file":"main.min.js","sourcesContent":["(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})","mapboxgl.accessToken = '';\nconst map = new mapboxgl.Map({\n  container: 'map', // container id\n  style: 'https://openmaptiles.github.io/positron-gl-style/style-cdn.json', //stylesheet location\n  center: [4.355975, 50.860633], // starting position\n  zoom: 11 // starting zoom\n});\n\nfunction startTracking() {\n  let markerItem;\n\n  const geojson = {\n    type: 'FeatureCollection',\n    features: [\n      {\n        id: 'currentPosition',\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: [0, 0]\n        },\n        properties: {\n          title: 'CURRENT POSITION',\n          iconSize: [50, 50]\n        }\n      }\n    ]\n  };\n  let el = document.createElement('div');\n  el.className = 'marker';\n  let child1 = document.createElement('div');\n  child1.className = 'dot';\n  let child2 = document.createElement('div');\n  child2.className = 'pulse';\n  el.appendChild(child1);\n  el.appendChild(child2);\n  el.src = './icons/locator-yellow.svg';\n  const marker = geojson.features[0];\n  markerItem = new mapboxgl.Marker(el);\n\n  if (navigator.geolocation) {\n    navigator.geolocation.watchPosition(position =>\n      onPosition(position, markerItem)\n    );\n  } else {\n    alert(\"Sorry, your browser doesn't support geolocation!\");\n  }\n\n  if (window.DeviceOrientationEvent) {\n    window.addEventListener('deviceorientation', _setHeading);\n  }\n  return markerItem;\n}\n\nfunction stopTracking() {\n  navigator.geolocation.clearWatch(this.state.watchPositionId);\n  window.removeEventListener('deviceorientation', _setHeading);\n}\n\nfunction onPosition(position, markerItem) {\n  markerItem.setLngLat([position.coords.longitude, position.coords.latitude]);\n  markerItem.addTo(map);\n}\n\nfunction _setHeading(e) {}\n\nfunction addAllLayers() {\n  map.addSource('GFR', {\n    type: 'geojson',\n    data: 'http://188.226.154.37/routes/GFR.json'\n  });\n  map.addLayer({\n    id: 'GFR_routes',\n    type: 'line',\n    source: 'GFR',\n    layout: {\n      visibility: 'visible'\n    },\n    paint: {\n      'line-color': {\n        type: 'identity',\n        property: 'colour'\n      },\n      'line-width': 5,\n      'line-opacity': 0.3\n    }\n  });\n  map.addLayer({\n    id: 'GFR_symbols',\n    type: 'symbol',\n    source: 'GFR',\n    layout: {\n      visibility: 'visible',\n      'symbol-placement': 'line',\n      'text-font': ['Open Sans Regular'],\n      'text-field': '{icr}', // part 2 of this is how to do it\n      'text-size': 16\n    },\n    paint: {\n      'text-color': {\n        type: 'identity',\n        property: 'colour'\n      }\n    }\n  });\n}\n\nfunction toggleLayer(id) {\n  let visibility = map.getLayoutProperty(id, 'visibility');\n  if (visibility === 'visible') {\n    visibility = 'none';\n  } else {\n    visibility = 'visible';\n  }\n  map.setLayoutProperty(id, 'visibility', visibility);\n}\n\nfunction addMarkers(origin, destination) {\n  const geojson = {\n    type: 'FeatureCollection',\n    features: [\n      {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: origin\n        },\n        properties: {\n          title: 'START',\n          iconSize: [50, 50]\n        }\n      },\n      {\n        type: 'Feature',\n        geometry: {\n          type: 'Point',\n          coordinates: destination\n        },\n        properties: {\n          title: 'END',\n          iconSize: [50, 50]\n        }\n      }\n    ]\n  };\n  geojson.features.forEach(marker => {\n    let el = document.createElement('img');\n    el.className = 'marker';\n    el.src = './icons/locator-yellow.svg';\n    el.style.width = marker.properties.iconSize[0] + 'px';\n    el.style.height = marker.properties.iconSize[1] + 'px';\n    new mapboxgl.Marker(el, {\n      offset: [\n        -marker.properties.iconSize[0] / 2,\n        -marker.properties.iconSize[1] / 2\n      ]\n    })\n      .setLngLat(marker.geometry.coordinates)\n      .addTo(map);\n  });\n}\n\nfunction calculateRoute(origin, destination, profile) {\n  // swap around values for the API\n  origin = [origin[1], origin[0]];\n  destination = [destination[1], destination[0]];\n  const url = `http://188.226.154.37/route?loc1=${origin}&loc2=${destination}&profile=${profile}`;\n  map.addLayer({\n    id: profile,\n    type: 'line',\n    source: {\n      type: 'geojson',\n      data: url\n    },\n    paint: {\n      'line-color': profile === 'networks' ? 'red' : 'grey',\n      'line-width': 4\n    }\n  });\n}\n\nfunction clearRoutes() {\n  map.removeLayer('networks');\n  map.removeLayer('shortest');\n  map.removeLayer('points');\n}\n\nfunction createGeocoder(placeholder) {\n  return new MapboxGeocoder({\n    accessToken:\n      'pk.eyJ1IjoiYXJuYXVkd2V5dHMiLCJhIjoiY2o0cGt3d3oxMXl0cDMzcXNlbThnM3RtaCJ9.BMUyxqHH-FC69pW4U4YO9A',\n    flyTo: false,\n    placeholder,\n    country: 'BE'\n  });\n}\n\nmap.on('load', function() {\n  let origin = null;\n  let destination = null;\n  let position = null;\n\n  position = startTracking();\n\n  addAllLayers();\n\n  map.addControl(new mapboxgl.GeolocateControl());\n\n  // create geocoders and add to map\n  const geocoder = createGeocoder('origin');\n  const geocoder2 = createGeocoder('destination');\n  map.addControl(geocoder);\n  map.addControl(geocoder2);\n\n  // do events on result\n  geocoder.on('result', ({ result }) => (origin = setPoint(result)));\n  geocoder2.on('result', ({ result }) => {\n    console.log('geocoder2 result found!');\n    destination = setPoint(result);\n    calculateRoute(origin, destination, 'shortest');\n    calculateRoute(origin, destination, 'networks');\n    addMarkers(origin, destination);\n    toggleLayer('GFR_routes');\n    toggleLayer('GFR_symbols');\n  });\n\n  function setPoint(result) {\n    return result.geometry.coordinates;\n  }\n});\n"]}